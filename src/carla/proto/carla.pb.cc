// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: carla.proto

#include "carla.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace carla {

inline constexpr Vector::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : x_{0},
        y_{0},
        z_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Vector::Vector(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct VectorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VectorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VectorDefaultTypeInternal() {}
  union {
    Vector _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VectorDefaultTypeInternal _Vector_default_instance_;

inline constexpr Rotation::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : pitch_{0},
        yaw_{0},
        roll_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Rotation::Rotation(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RotationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RotationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RotationDefaultTypeInternal() {}
  union {
    Rotation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RotationDefaultTypeInternal _Rotation_default_instance_;

inline constexpr Number::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : num_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Number::Number(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct NumberDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NumberDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NumberDefaultTypeInternal() {}
  union {
    Number _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NumberDefaultTypeInternal _Number_default_instance_;

inline constexpr Boolean::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : value_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Boolean::Boolean(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct BooleanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BooleanDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BooleanDefaultTypeInternal() {}
  union {
    Boolean _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BooleanDefaultTypeInternal _Boolean_default_instance_;

inline constexpr ActorIds::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : actorid_{},
        _actorid_cached_byte_size_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ActorIds::ActorIds(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ActorIdsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActorIdsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActorIdsDefaultTypeInternal() {}
  union {
    ActorIds _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActorIdsDefaultTypeInternal _ActorIds_default_instance_;

inline constexpr Transform::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        location_{nullptr},
        rotation_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Transform::Transform(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TransformDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransformDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransformDefaultTypeInternal() {}
  union {
    Transform _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransformDefaultTypeInternal _Transform_default_instance_;

inline constexpr Control::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        waypoint_{nullptr},
        speed_{0},
        acceleration_{0},
        id_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Control::Control(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ControlDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControlDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControlDefaultTypeInternal() {}
  union {
    Control _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControlDefaultTypeInternal _Control_default_instance_;

inline constexpr Vehicle::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        speed_{nullptr},
        acceleration_{nullptr},
        location_{nullptr},
        transform_{nullptr},
        latitude_{0},
        id_{0},
        lane_{0},
        longitude_{0},
        length_{0},
        width_{0},
        heading_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Vehicle::Vehicle(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct VehicleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VehicleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VehicleDefaultTypeInternal() {}
  union {
    Vehicle _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VehicleDefaultTypeInternal _Vehicle_default_instance_;

inline constexpr Object::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        speed_{nullptr},
        acceleration_{nullptr},
        transform_{nullptr},
        dx_{0},
        dy_{0},
        id_{0},
        timestamp_{0},
        length_{0},
        width_{0},
        confidence_{0},
        onsight_{false},
        tracked_{false},
        detected_{false},
        perceivedby_{0},
        yaw_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Object::Object(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ObjectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectDefaultTypeInternal() {}
  union {
    Object _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectDefaultTypeInternal _Object_default_instance_;

inline constexpr Objects::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : objects_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Objects::Objects(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ObjectsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectsDefaultTypeInternal() {}
  union {
    Objects _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectsDefaultTypeInternal _Objects_default_instance_;

inline constexpr ObjectIn::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        object_{nullptr},
        egoid_{0},
        fromid_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ObjectIn::ObjectIn(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ObjectInDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectInDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectInDefaultTypeInternal() {}
  union {
    ObjectIn _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectInDefaultTypeInternal _ObjectIn_default_instance_;
}  // namespace carla
static ::_pb::Metadata file_level_metadata_carla_2eproto[11];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_carla_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_carla_2eproto = nullptr;
const ::uint32_t TableStruct_carla_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::carla::ActorIds, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::carla::ActorIds, _impl_.actorid_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::carla::Number, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::carla::Number, _impl_.num_),
    PROTOBUF_FIELD_OFFSET(::carla::Vehicle, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::carla::Vehicle, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::carla::Vehicle, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::carla::Vehicle, _impl_.speed_),
    PROTOBUF_FIELD_OFFSET(::carla::Vehicle, _impl_.acceleration_),
    PROTOBUF_FIELD_OFFSET(::carla::Vehicle, _impl_.location_),
    PROTOBUF_FIELD_OFFSET(::carla::Vehicle, _impl_.latitude_),
    PROTOBUF_FIELD_OFFSET(::carla::Vehicle, _impl_.longitude_),
    PROTOBUF_FIELD_OFFSET(::carla::Vehicle, _impl_.length_),
    PROTOBUF_FIELD_OFFSET(::carla::Vehicle, _impl_.width_),
    PROTOBUF_FIELD_OFFSET(::carla::Vehicle, _impl_.lane_),
    PROTOBUF_FIELD_OFFSET(::carla::Vehicle, _impl_.heading_),
    PROTOBUF_FIELD_OFFSET(::carla::Vehicle, _impl_.transform_),
    ~0u,
    0,
    1,
    2,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    3,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::carla::Vector, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::carla::Vector, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::carla::Vector, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::carla::Vector, _impl_.z_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::carla::Rotation, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::carla::Rotation, _impl_.pitch_),
    PROTOBUF_FIELD_OFFSET(::carla::Rotation, _impl_.yaw_),
    PROTOBUF_FIELD_OFFSET(::carla::Rotation, _impl_.roll_),
    PROTOBUF_FIELD_OFFSET(::carla::Transform, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::carla::Transform, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::carla::Transform, _impl_.location_),
    PROTOBUF_FIELD_OFFSET(::carla::Transform, _impl_.rotation_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::carla::Object, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::carla::Object, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::carla::Object, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::carla::Object, _impl_.dx_),
    PROTOBUF_FIELD_OFFSET(::carla::Object, _impl_.dy_),
    PROTOBUF_FIELD_OFFSET(::carla::Object, _impl_.speed_),
    PROTOBUF_FIELD_OFFSET(::carla::Object, _impl_.acceleration_),
    PROTOBUF_FIELD_OFFSET(::carla::Object, _impl_.length_),
    PROTOBUF_FIELD_OFFSET(::carla::Object, _impl_.width_),
    PROTOBUF_FIELD_OFFSET(::carla::Object, _impl_.onsight_),
    PROTOBUF_FIELD_OFFSET(::carla::Object, _impl_.tracked_),
    PROTOBUF_FIELD_OFFSET(::carla::Object, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::carla::Object, _impl_.confidence_),
    PROTOBUF_FIELD_OFFSET(::carla::Object, _impl_.yaw_),
    PROTOBUF_FIELD_OFFSET(::carla::Object, _impl_.transform_),
    PROTOBUF_FIELD_OFFSET(::carla::Object, _impl_.detected_),
    PROTOBUF_FIELD_OFFSET(::carla::Object, _impl_.perceivedby_),
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    2,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::carla::Objects, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::carla::Objects, _impl_.objects_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::carla::Boolean, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::carla::Boolean, _impl_.value_),
    PROTOBUF_FIELD_OFFSET(::carla::ObjectIn, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::carla::ObjectIn, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::carla::ObjectIn, _impl_.object_),
    PROTOBUF_FIELD_OFFSET(::carla::ObjectIn, _impl_.egoid_),
    PROTOBUF_FIELD_OFFSET(::carla::ObjectIn, _impl_.fromid_),
    0,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::carla::Control, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::carla::Control, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::carla::Control, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::carla::Control, _impl_.waypoint_),
    PROTOBUF_FIELD_OFFSET(::carla::Control, _impl_.speed_),
    PROTOBUF_FIELD_OFFSET(::carla::Control, _impl_.acceleration_),
    ~0u,
    0,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::carla::ActorIds)},
        {9, -1, -1, sizeof(::carla::Number)},
        {18, 37, -1, sizeof(::carla::Vehicle)},
        {48, -1, -1, sizeof(::carla::Vector)},
        {59, -1, -1, sizeof(::carla::Rotation)},
        {70, 80, -1, sizeof(::carla::Transform)},
        {82, 105, -1, sizeof(::carla::Object)},
        {120, -1, -1, sizeof(::carla::Objects)},
        {129, -1, -1, sizeof(::carla::Boolean)},
        {138, 149, -1, sizeof(::carla::ObjectIn)},
        {152, 164, -1, sizeof(::carla::Control)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::carla::_ActorIds_default_instance_._instance,
    &::carla::_Number_default_instance_._instance,
    &::carla::_Vehicle_default_instance_._instance,
    &::carla::_Vector_default_instance_._instance,
    &::carla::_Rotation_default_instance_._instance,
    &::carla::_Transform_default_instance_._instance,
    &::carla::_Object_default_instance_._instance,
    &::carla::_Objects_default_instance_._instance,
    &::carla::_Boolean_default_instance_._instance,
    &::carla::_ObjectIn_default_instance_._instance,
    &::carla::_Control_default_instance_._instance,
};
const char descriptor_table_protodef_carla_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\013carla.proto\022\005carla\032\033google/protobuf/em"
    "pty.proto\"\033\n\010ActorIds\022\017\n\007actorId\030\001 \003(\005\"\025"
    "\n\006Number\022\013\n\003num\030\001 \001(\005\"\201\002\n\007Vehicle\022\n\n\002id\030"
    "\001 \001(\005\022\034\n\005speed\030\002 \001(\0132\r.carla.Vector\022#\n\014a"
    "cceleration\030\003 \001(\0132\r.carla.Vector\022\037\n\010loca"
    "tion\030\004 \001(\0132\r.carla.Vector\022\020\n\010latitude\030\005 "
    "\001(\001\022\021\n\tlongitude\030\006 \001(\001\022\016\n\006length\030\007 \001(\001\022\r"
    "\n\005width\030\010 \001(\001\022\014\n\004lane\030\t \001(\005\022\017\n\007heading\030\n"
    " \001(\001\022#\n\ttransform\030\013 \001(\0132\020.carla.Transfor"
    "m\")\n\006Vector\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003"
    " \001(\001\"4\n\010Rotation\022\r\n\005pitch\030\001 \001(\001\022\013\n\003yaw\030\002"
    " \001(\001\022\014\n\004roll\030\003 \001(\001\"O\n\tTransform\022\037\n\010locat"
    "ion\030\001 \001(\0132\r.carla.Vector\022!\n\010rotation\030\002 \001"
    "(\0132\017.carla.Rotation\"\260\002\n\006Object\022\n\n\002id\030\001 \001"
    "(\005\022\n\n\002dx\030\002 \001(\001\022\n\n\002dy\030\003 \001(\001\022\034\n\005speed\030\004 \001("
    "\0132\r.carla.Vector\022#\n\014acceleration\030\005 \001(\0132\r"
    ".carla.Vector\022\016\n\006length\030\006 \001(\001\022\r\n\005width\030\007"
    " \001(\001\022\017\n\007onSight\030\010 \001(\010\022\017\n\007tracked\030\t \001(\010\022\021"
    "\n\ttimestamp\030\n \001(\005\022\022\n\nconfidence\030\013 \001(\001\022\013\n"
    "\003yaw\030\014 \001(\001\022#\n\ttransform\030\r \001(\0132\020.carla.Tr"
    "ansform\022\020\n\010detected\030\016 \001(\010\022\023\n\013perceivedBy"
    "\030\017 \001(\005\")\n\007Objects\022\036\n\007objects\030\001 \003(\0132\r.car"
    "la.Object\"\030\n\007Boolean\022\r\n\005value\030\001 \001(\010\"H\n\010O"
    "bjectIn\022\035\n\006object\030\001 \001(\0132\r.carla.Object\022\r"
    "\n\005egoId\030\002 \001(\005\022\016\n\006fromId\030\003 \001(\005\"[\n\007Control"
    "\022\n\n\002id\030\001 \001(\005\022\037\n\010waypoint\030\002 \001(\0132\r.carla.V"
    "ector\022\r\n\005speed\030\003 \001(\001\022\024\n\014acceleration\030\004 \001"
    "(\0012\276\005\n\014CarlaAdapter\022<\n\022ExecuteOneTimeSte"
    "p\022\026.google.protobuf.Empty\032\016.carla.Boolea"
    "n\0228\n\006Finish\022\026.google.protobuf.Empty\032\026.go"
    "ogle.protobuf.Empty\022>\n\023GetManagedActorsI"
    "ds\022\026.google.protobuf.Empty\032\017.carla.Actor"
    "Ids\022<\n\021GetManagedCAVsIds\022\026.google.protob"
    "uf.Empty\032\017.carla.ActorIds\0224\n\023GetManagedA"
    "ctorById\022\r.carla.Number\032\016.carla.Vehicle\022"
    ".\n\rInsertVehicle\022\016.carla.Vehicle\032\r.carla"
    ".Number\022\?\n\023GetRandomSpawnPoint\022\026.google."
    "protobuf.Empty\032\020.carla.Transform\022,\n\013GetA"
    "ctorLDM\022\r.carla.Number\032\016.carla.Objects\022."
    "\n\014InsertObject\022\017.carla.ObjectIn\032\r.carla."
    "Number\022,\n\014GetCartesian\022\r.carla.Vector\032\r."
    "carla.Vector\022&\n\006GetGeo\022\r.carla.Vector\032\r."
    "carla.Vector\022\'\n\006hasLDM\022\r.carla.Number\032\016."
    "carla.Boolean\0224\n\nSetControl\022\016.carla.Cont"
    "rol\032\026.google.protobuf.Emptyb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_carla_2eproto_deps[1] =
    {
        &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::absl::once_flag descriptor_table_carla_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_carla_2eproto = {
    false,
    false,
    1795,
    descriptor_table_protodef_carla_2eproto,
    "carla.proto",
    &descriptor_table_carla_2eproto_once,
    descriptor_table_carla_2eproto_deps,
    1,
    11,
    schemas,
    file_default_instances,
    TableStruct_carla_2eproto::offsets,
    file_level_metadata_carla_2eproto,
    file_level_enum_descriptors_carla_2eproto,
    file_level_service_descriptors_carla_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_carla_2eproto_getter() {
  return &descriptor_table_carla_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_carla_2eproto(&descriptor_table_carla_2eproto);
namespace carla {
// ===================================================================

class ActorIds::_Internal {
 public:
};

ActorIds::ActorIds(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:carla.ActorIds)
}
inline PROTOBUF_NDEBUG_INLINE ActorIds::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : actorid_{visibility, arena, from.actorid_},
        _actorid_cached_byte_size_{0},
        _cached_size_{0} {}

ActorIds::ActorIds(
    ::google::protobuf::Arena* arena,
    const ActorIds& from)
    : ::google::protobuf::Message(arena) {
  ActorIds* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:carla.ActorIds)
}
inline PROTOBUF_NDEBUG_INLINE ActorIds::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : actorid_{visibility, arena},
        _actorid_cached_byte_size_{0},
        _cached_size_{0} {}

inline void ActorIds::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ActorIds::~ActorIds() {
  // @@protoc_insertion_point(destructor:carla.ActorIds)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ActorIds::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ActorIds::Clear() {
// @@protoc_insertion_point(message_clear_start:carla.ActorIds)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.actorid_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ActorIds::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> ActorIds::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ActorIds_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated int32 actorId = 1;
    {::_pbi::TcParser::FastV32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ActorIds, _impl_.actorid_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated int32 actorId = 1;
    {PROTOBUF_FIELD_OFFSET(ActorIds, _impl_.actorid_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* ActorIds::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:carla.ActorIds)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated int32 actorId = 1;
  {
    int byte_size = _impl_._actorid_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_actorid(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:carla.ActorIds)
  return target;
}

::size_t ActorIds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carla.ActorIds)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 actorId = 1;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_actorid())
    ;
    _impl_._actorid_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ActorIds::_class_data_ = {
    ActorIds::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ActorIds::GetClassData() const {
  return &_class_data_;
}

void ActorIds::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ActorIds*>(&to_msg);
  auto& from = static_cast<const ActorIds&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:carla.ActorIds)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_actorid()->MergeFrom(from._internal_actorid());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ActorIds::CopyFrom(const ActorIds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carla.ActorIds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ActorIds::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ActorIds::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ActorIds::InternalSwap(ActorIds* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.actorid_.InternalSwap(&other->_impl_.actorid_);
}

::google::protobuf::Metadata ActorIds::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_carla_2eproto_getter, &descriptor_table_carla_2eproto_once,
      file_level_metadata_carla_2eproto[0]);
}
// ===================================================================

class Number::_Internal {
 public:
};

Number::Number(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:carla.Number)
}
Number::Number(
    ::google::protobuf::Arena* arena, const Number& from)
    : Number(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Number::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Number::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.num_ = {};
}
Number::~Number() {
  // @@protoc_insertion_point(destructor:carla.Number)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Number::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Number::Clear() {
// @@protoc_insertion_point(message_clear_start:carla.Number)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.num_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Number::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> Number::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Number_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int32 num = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Number, _impl_.num_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Number, _impl_.num_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 num = 1;
    {PROTOBUF_FIELD_OFFSET(Number, _impl_.num_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Number::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:carla.Number)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 num = 1;
  if (this->_internal_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:carla.Number)
  return target;
}

::size_t Number::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carla.Number)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 num = 1;
  if (this->_internal_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Number::_class_data_ = {
    Number::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Number::GetClassData() const {
  return &_class_data_;
}

void Number::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Number*>(&to_msg);
  auto& from = static_cast<const Number&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:carla.Number)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_num() != 0) {
    _this->_internal_set_num(from._internal_num());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Number::CopyFrom(const Number& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carla.Number)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Number::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Number::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Number::InternalSwap(Number* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.num_, other->_impl_.num_);
}

::google::protobuf::Metadata Number::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_carla_2eproto_getter, &descriptor_table_carla_2eproto_once,
      file_level_metadata_carla_2eproto[1]);
}
// ===================================================================

class Vehicle::_Internal {
 public:
  using HasBits = decltype(std::declval<Vehicle>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Vehicle, _impl_._has_bits_);
  static const ::carla::Vector& speed(const Vehicle* msg);
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::carla::Vector& acceleration(const Vehicle* msg);
  static void set_has_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::carla::Vector& location(const Vehicle* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::carla::Transform& transform(const Vehicle* msg);
  static void set_has_transform(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::carla::Vector& Vehicle::_Internal::speed(const Vehicle* msg) {
  return *msg->_impl_.speed_;
}
const ::carla::Vector& Vehicle::_Internal::acceleration(const Vehicle* msg) {
  return *msg->_impl_.acceleration_;
}
const ::carla::Vector& Vehicle::_Internal::location(const Vehicle* msg) {
  return *msg->_impl_.location_;
}
const ::carla::Transform& Vehicle::_Internal::transform(const Vehicle* msg) {
  return *msg->_impl_.transform_;
}
Vehicle::Vehicle(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:carla.Vehicle)
}
inline PROTOBUF_NDEBUG_INLINE Vehicle::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Vehicle::Vehicle(
    ::google::protobuf::Arena* arena,
    const Vehicle& from)
    : ::google::protobuf::Message(arena) {
  Vehicle* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.speed_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::carla::Vector>(arena, *from._impl_.speed_)
                : nullptr;
  _impl_.acceleration_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::carla::Vector>(arena, *from._impl_.acceleration_)
                : nullptr;
  _impl_.location_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::carla::Vector>(arena, *from._impl_.location_)
                : nullptr;
  _impl_.transform_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::carla::Transform>(arena, *from._impl_.transform_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, latitude_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, latitude_),
           offsetof(Impl_, heading_) -
               offsetof(Impl_, latitude_) +
               sizeof(Impl_::heading_));

  // @@protoc_insertion_point(copy_constructor:carla.Vehicle)
}
inline PROTOBUF_NDEBUG_INLINE Vehicle::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Vehicle::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, speed_),
           0,
           offsetof(Impl_, heading_) -
               offsetof(Impl_, speed_) +
               sizeof(Impl_::heading_));
}
Vehicle::~Vehicle() {
  // @@protoc_insertion_point(destructor:carla.Vehicle)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Vehicle::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.speed_;
  delete _impl_.acceleration_;
  delete _impl_.location_;
  delete _impl_.transform_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Vehicle::Clear() {
// @@protoc_insertion_point(message_clear_start:carla.Vehicle)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.speed_ != nullptr);
      _impl_.speed_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.acceleration_ != nullptr);
      _impl_.acceleration_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.location_ != nullptr);
      _impl_.location_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.transform_ != nullptr);
      _impl_.transform_->Clear();
    }
  }
  ::memset(&_impl_.latitude_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.heading_) -
      reinterpret_cast<char*>(&_impl_.latitude_)) + sizeof(_impl_.heading_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Vehicle::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 11, 4, 0, 2> Vehicle::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Vehicle, _impl_._has_bits_),
    0, // no _extensions_
    11, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965248,  // skipmap
    offsetof(decltype(_table_), field_entries),
    11,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Vehicle_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Vehicle, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Vehicle, _impl_.id_)}},
    // .carla.Vector speed = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(Vehicle, _impl_.speed_)}},
    // .carla.Vector acceleration = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(Vehicle, _impl_.acceleration_)}},
    // .carla.Vector location = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 2, 2, PROTOBUF_FIELD_OFFSET(Vehicle, _impl_.location_)}},
    // double latitude = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 63, 0, PROTOBUF_FIELD_OFFSET(Vehicle, _impl_.latitude_)}},
    // double longitude = 6;
    {::_pbi::TcParser::FastF64S1,
     {49, 63, 0, PROTOBUF_FIELD_OFFSET(Vehicle, _impl_.longitude_)}},
    // double length = 7;
    {::_pbi::TcParser::FastF64S1,
     {57, 63, 0, PROTOBUF_FIELD_OFFSET(Vehicle, _impl_.length_)}},
    // double width = 8;
    {::_pbi::TcParser::FastF64S1,
     {65, 63, 0, PROTOBUF_FIELD_OFFSET(Vehicle, _impl_.width_)}},
    // int32 lane = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Vehicle, _impl_.lane_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(Vehicle, _impl_.lane_)}},
    // double heading = 10;
    {::_pbi::TcParser::FastF64S1,
     {81, 63, 0, PROTOBUF_FIELD_OFFSET(Vehicle, _impl_.heading_)}},
    // .carla.Transform transform = 11;
    {::_pbi::TcParser::FastMtS1,
     {90, 3, 3, PROTOBUF_FIELD_OFFSET(Vehicle, _impl_.transform_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(Vehicle, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .carla.Vector speed = 2;
    {PROTOBUF_FIELD_OFFSET(Vehicle, _impl_.speed_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .carla.Vector acceleration = 3;
    {PROTOBUF_FIELD_OFFSET(Vehicle, _impl_.acceleration_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .carla.Vector location = 4;
    {PROTOBUF_FIELD_OFFSET(Vehicle, _impl_.location_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // double latitude = 5;
    {PROTOBUF_FIELD_OFFSET(Vehicle, _impl_.latitude_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double longitude = 6;
    {PROTOBUF_FIELD_OFFSET(Vehicle, _impl_.longitude_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double length = 7;
    {PROTOBUF_FIELD_OFFSET(Vehicle, _impl_.length_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double width = 8;
    {PROTOBUF_FIELD_OFFSET(Vehicle, _impl_.width_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // int32 lane = 9;
    {PROTOBUF_FIELD_OFFSET(Vehicle, _impl_.lane_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // double heading = 10;
    {PROTOBUF_FIELD_OFFSET(Vehicle, _impl_.heading_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // .carla.Transform transform = 11;
    {PROTOBUF_FIELD_OFFSET(Vehicle, _impl_.transform_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::carla::Vector>()},
    {::_pbi::TcParser::GetTable<::carla::Vector>()},
    {::_pbi::TcParser::GetTable<::carla::Vector>()},
    {::_pbi::TcParser::GetTable<::carla::Transform>()},
  }}, {{
  }},
};

::uint8_t* Vehicle::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:carla.Vehicle)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .carla.Vector speed = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::speed(this),
        _Internal::speed(this).GetCachedSize(), target, stream);
  }

  // .carla.Vector acceleration = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::acceleration(this),
        _Internal::acceleration(this).GetCachedSize(), target, stream);
  }

  // .carla.Vector location = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // double latitude = 5;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  ::uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        5, this->_internal_latitude(), target);
  }

  // double longitude = 6;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  ::uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        6, this->_internal_longitude(), target);
  }

  // double length = 7;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_length = this->_internal_length();
  ::uint64_t raw_length;
  memcpy(&raw_length, &tmp_length, sizeof(tmp_length));
  if (raw_length != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        7, this->_internal_length(), target);
  }

  // double width = 8;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_width = this->_internal_width();
  ::uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        8, this->_internal_width(), target);
  }

  // int32 lane = 9;
  if (this->_internal_lane() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<9>(
            stream, this->_internal_lane(), target);
  }

  // double heading = 10;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_heading = this->_internal_heading();
  ::uint64_t raw_heading;
  memcpy(&raw_heading, &tmp_heading, sizeof(tmp_heading));
  if (raw_heading != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        10, this->_internal_heading(), target);
  }

  // .carla.Transform transform = 11;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        11, _Internal::transform(this),
        _Internal::transform(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:carla.Vehicle)
  return target;
}

::size_t Vehicle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carla.Vehicle)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .carla.Vector speed = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.speed_);
    }

    // .carla.Vector acceleration = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.acceleration_);
    }

    // .carla.Vector location = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.location_);
    }

    // .carla.Transform transform = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.transform_);
    }

  }
  // double latitude = 5;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  ::uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    total_size += 9;
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  // int32 lane = 9;
  if (this->_internal_lane() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_lane());
  }

  // double longitude = 6;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  ::uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    total_size += 9;
  }

  // double length = 7;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_length = this->_internal_length();
  ::uint64_t raw_length;
  memcpy(&raw_length, &tmp_length, sizeof(tmp_length));
  if (raw_length != 0) {
    total_size += 9;
  }

  // double width = 8;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_width = this->_internal_width();
  ::uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    total_size += 9;
  }

  // double heading = 10;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_heading = this->_internal_heading();
  ::uint64_t raw_heading;
  memcpy(&raw_heading, &tmp_heading, sizeof(tmp_heading));
  if (raw_heading != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Vehicle::_class_data_ = {
    Vehicle::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Vehicle::GetClassData() const {
  return &_class_data_;
}

void Vehicle::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Vehicle*>(&to_msg);
  auto& from = static_cast<const Vehicle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:carla.Vehicle)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_speed()->::carla::Vector::MergeFrom(
          from._internal_speed());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_acceleration()->::carla::Vector::MergeFrom(
          from._internal_acceleration());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_location()->::carla::Vector::MergeFrom(
          from._internal_location());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_transform()->::carla::Transform::MergeFrom(
          from._internal_transform());
    }
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_latitude = from._internal_latitude();
  ::uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    _this->_internal_set_latitude(from._internal_latitude());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_lane() != 0) {
    _this->_internal_set_lane(from._internal_lane());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_longitude = from._internal_longitude();
  ::uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    _this->_internal_set_longitude(from._internal_longitude());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_length = from._internal_length();
  ::uint64_t raw_length;
  memcpy(&raw_length, &tmp_length, sizeof(tmp_length));
  if (raw_length != 0) {
    _this->_internal_set_length(from._internal_length());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_width = from._internal_width();
  ::uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_heading = from._internal_heading();
  ::uint64_t raw_heading;
  memcpy(&raw_heading, &tmp_heading, sizeof(tmp_heading));
  if (raw_heading != 0) {
    _this->_internal_set_heading(from._internal_heading());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Vehicle::CopyFrom(const Vehicle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carla.Vehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Vehicle::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Vehicle::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Vehicle::InternalSwap(Vehicle* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vehicle, _impl_.heading_)
      + sizeof(Vehicle::_impl_.heading_)
      - PROTOBUF_FIELD_OFFSET(Vehicle, _impl_.speed_)>(
          reinterpret_cast<char*>(&_impl_.speed_),
          reinterpret_cast<char*>(&other->_impl_.speed_));
}

::google::protobuf::Metadata Vehicle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_carla_2eproto_getter, &descriptor_table_carla_2eproto_once,
      file_level_metadata_carla_2eproto[2]);
}
// ===================================================================

class Vector::_Internal {
 public:
};

Vector::Vector(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:carla.Vector)
}
Vector::Vector(
    ::google::protobuf::Arena* arena, const Vector& from)
    : Vector(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Vector::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Vector::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_),
           0,
           offsetof(Impl_, z_) -
               offsetof(Impl_, x_) +
               sizeof(Impl_::z_));
}
Vector::~Vector() {
  // @@protoc_insertion_point(destructor:carla.Vector)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Vector::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Vector::Clear() {
// @@protoc_insertion_point(message_clear_start:carla.Vector)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Vector::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> Vector::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Vector_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // double x = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(Vector, _impl_.x_)}},
    // double y = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(Vector, _impl_.y_)}},
    // double z = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(Vector, _impl_.z_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double x = 1;
    {PROTOBUF_FIELD_OFFSET(Vector, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double y = 2;
    {PROTOBUF_FIELD_OFFSET(Vector, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double z = 3;
    {PROTOBUF_FIELD_OFFSET(Vector, _impl_.z_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Vector::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:carla.Vector)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double x = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  ::uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_x(), target);
  }

  // double y = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  ::uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_y(), target);
  }

  // double z = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  ::uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:carla.Vector)
  return target;
}

::size_t Vector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carla.Vector)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  ::uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 9;
  }

  // double y = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  ::uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 9;
  }

  // double z = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  ::uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Vector::_class_data_ = {
    Vector::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Vector::GetClassData() const {
  return &_class_data_;
}

void Vector::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Vector*>(&to_msg);
  auto& from = static_cast<const Vector&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:carla.Vector)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  ::uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  ::uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_z = from._internal_z();
  ::uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Vector::CopyFrom(const Vector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carla.Vector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Vector::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Vector::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Vector::InternalSwap(Vector* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector, _impl_.z_)
      + sizeof(Vector::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Vector, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata Vector::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_carla_2eproto_getter, &descriptor_table_carla_2eproto_once,
      file_level_metadata_carla_2eproto[3]);
}
// ===================================================================

class Rotation::_Internal {
 public:
};

Rotation::Rotation(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:carla.Rotation)
}
Rotation::Rotation(
    ::google::protobuf::Arena* arena, const Rotation& from)
    : Rotation(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Rotation::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Rotation::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, pitch_),
           0,
           offsetof(Impl_, roll_) -
               offsetof(Impl_, pitch_) +
               sizeof(Impl_::roll_));
}
Rotation::~Rotation() {
  // @@protoc_insertion_point(destructor:carla.Rotation)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Rotation::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Rotation::Clear() {
// @@protoc_insertion_point(message_clear_start:carla.Rotation)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pitch_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.roll_) -
      reinterpret_cast<char*>(&_impl_.pitch_)) + sizeof(_impl_.roll_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Rotation::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> Rotation::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Rotation_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // double pitch = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(Rotation, _impl_.pitch_)}},
    // double yaw = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(Rotation, _impl_.yaw_)}},
    // double roll = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(Rotation, _impl_.roll_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double pitch = 1;
    {PROTOBUF_FIELD_OFFSET(Rotation, _impl_.pitch_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double yaw = 2;
    {PROTOBUF_FIELD_OFFSET(Rotation, _impl_.yaw_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double roll = 3;
    {PROTOBUF_FIELD_OFFSET(Rotation, _impl_.roll_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Rotation::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:carla.Rotation)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double pitch = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_pitch = this->_internal_pitch();
  ::uint64_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_pitch(), target);
  }

  // double yaw = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_yaw = this->_internal_yaw();
  ::uint64_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_yaw(), target);
  }

  // double roll = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_roll = this->_internal_roll();
  ::uint64_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_roll(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:carla.Rotation)
  return target;
}

::size_t Rotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carla.Rotation)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double pitch = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_pitch = this->_internal_pitch();
  ::uint64_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    total_size += 9;
  }

  // double yaw = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_yaw = this->_internal_yaw();
  ::uint64_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    total_size += 9;
  }

  // double roll = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_roll = this->_internal_roll();
  ::uint64_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Rotation::_class_data_ = {
    Rotation::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Rotation::GetClassData() const {
  return &_class_data_;
}

void Rotation::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Rotation*>(&to_msg);
  auto& from = static_cast<const Rotation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:carla.Rotation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_pitch = from._internal_pitch();
  ::uint64_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    _this->_internal_set_pitch(from._internal_pitch());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_yaw = from._internal_yaw();
  ::uint64_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    _this->_internal_set_yaw(from._internal_yaw());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_roll = from._internal_roll();
  ::uint64_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    _this->_internal_set_roll(from._internal_roll());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Rotation::CopyFrom(const Rotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carla.Rotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Rotation::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Rotation::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Rotation::InternalSwap(Rotation* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rotation, _impl_.roll_)
      + sizeof(Rotation::_impl_.roll_)
      - PROTOBUF_FIELD_OFFSET(Rotation, _impl_.pitch_)>(
          reinterpret_cast<char*>(&_impl_.pitch_),
          reinterpret_cast<char*>(&other->_impl_.pitch_));
}

::google::protobuf::Metadata Rotation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_carla_2eproto_getter, &descriptor_table_carla_2eproto_once,
      file_level_metadata_carla_2eproto[4]);
}
// ===================================================================

class Transform::_Internal {
 public:
  using HasBits = decltype(std::declval<Transform>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Transform, _impl_._has_bits_);
  static const ::carla::Vector& location(const Transform* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::carla::Rotation& rotation(const Transform* msg);
  static void set_has_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::carla::Vector& Transform::_Internal::location(const Transform* msg) {
  return *msg->_impl_.location_;
}
const ::carla::Rotation& Transform::_Internal::rotation(const Transform* msg) {
  return *msg->_impl_.rotation_;
}
Transform::Transform(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:carla.Transform)
}
inline PROTOBUF_NDEBUG_INLINE Transform::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Transform::Transform(
    ::google::protobuf::Arena* arena,
    const Transform& from)
    : ::google::protobuf::Message(arena) {
  Transform* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.location_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::carla::Vector>(arena, *from._impl_.location_)
                : nullptr;
  _impl_.rotation_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::carla::Rotation>(arena, *from._impl_.rotation_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:carla.Transform)
}
inline PROTOBUF_NDEBUG_INLINE Transform::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Transform::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, location_),
           0,
           offsetof(Impl_, rotation_) -
               offsetof(Impl_, location_) +
               sizeof(Impl_::rotation_));
}
Transform::~Transform() {
  // @@protoc_insertion_point(destructor:carla.Transform)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Transform::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.location_;
  delete _impl_.rotation_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Transform::Clear() {
// @@protoc_insertion_point(message_clear_start:carla.Transform)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.location_ != nullptr);
      _impl_.location_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.rotation_ != nullptr);
      _impl_.rotation_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Transform::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> Transform::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Transform, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Transform_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .carla.Rotation rotation = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Transform, _impl_.rotation_)}},
    // .carla.Vector location = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Transform, _impl_.location_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .carla.Vector location = 1;
    {PROTOBUF_FIELD_OFFSET(Transform, _impl_.location_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .carla.Rotation rotation = 2;
    {PROTOBUF_FIELD_OFFSET(Transform, _impl_.rotation_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::carla::Vector>()},
    {::_pbi::TcParser::GetTable<::carla::Rotation>()},
  }}, {{
  }},
};

::uint8_t* Transform::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:carla.Transform)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .carla.Vector location = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // .carla.Rotation rotation = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::rotation(this),
        _Internal::rotation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:carla.Transform)
  return target;
}

::size_t Transform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carla.Transform)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .carla.Vector location = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.location_);
    }

    // .carla.Rotation rotation = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.rotation_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Transform::_class_data_ = {
    Transform::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Transform::GetClassData() const {
  return &_class_data_;
}

void Transform::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Transform*>(&to_msg);
  auto& from = static_cast<const Transform&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:carla.Transform)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_location()->::carla::Vector::MergeFrom(
          from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_rotation()->::carla::Rotation::MergeFrom(
          from._internal_rotation());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Transform::CopyFrom(const Transform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carla.Transform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Transform::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Transform::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Transform::InternalSwap(Transform* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transform, _impl_.rotation_)
      + sizeof(Transform::_impl_.rotation_)
      - PROTOBUF_FIELD_OFFSET(Transform, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::google::protobuf::Metadata Transform::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_carla_2eproto_getter, &descriptor_table_carla_2eproto_once,
      file_level_metadata_carla_2eproto[5]);
}
// ===================================================================

class Object::_Internal {
 public:
  using HasBits = decltype(std::declval<Object>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Object, _impl_._has_bits_);
  static const ::carla::Vector& speed(const Object* msg);
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::carla::Vector& acceleration(const Object* msg);
  static void set_has_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::carla::Transform& transform(const Object* msg);
  static void set_has_transform(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::carla::Vector& Object::_Internal::speed(const Object* msg) {
  return *msg->_impl_.speed_;
}
const ::carla::Vector& Object::_Internal::acceleration(const Object* msg) {
  return *msg->_impl_.acceleration_;
}
const ::carla::Transform& Object::_Internal::transform(const Object* msg) {
  return *msg->_impl_.transform_;
}
Object::Object(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:carla.Object)
}
inline PROTOBUF_NDEBUG_INLINE Object::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Object::Object(
    ::google::protobuf::Arena* arena,
    const Object& from)
    : ::google::protobuf::Message(arena) {
  Object* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.speed_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::carla::Vector>(arena, *from._impl_.speed_)
                : nullptr;
  _impl_.acceleration_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::carla::Vector>(arena, *from._impl_.acceleration_)
                : nullptr;
  _impl_.transform_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::carla::Transform>(arena, *from._impl_.transform_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, dx_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, dx_),
           offsetof(Impl_, yaw_) -
               offsetof(Impl_, dx_) +
               sizeof(Impl_::yaw_));

  // @@protoc_insertion_point(copy_constructor:carla.Object)
}
inline PROTOBUF_NDEBUG_INLINE Object::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Object::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, speed_),
           0,
           offsetof(Impl_, yaw_) -
               offsetof(Impl_, speed_) +
               sizeof(Impl_::yaw_));
}
Object::~Object() {
  // @@protoc_insertion_point(destructor:carla.Object)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Object::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.speed_;
  delete _impl_.acceleration_;
  delete _impl_.transform_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Object::Clear() {
// @@protoc_insertion_point(message_clear_start:carla.Object)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.speed_ != nullptr);
      _impl_.speed_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.acceleration_ != nullptr);
      _impl_.acceleration_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.transform_ != nullptr);
      _impl_.transform_->Clear();
    }
  }
  ::memset(&_impl_.dx_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.yaw_) -
      reinterpret_cast<char*>(&_impl_.dx_)) + sizeof(_impl_.yaw_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Object::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 15, 3, 0, 2> Object::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Object, _impl_._has_bits_),
    0, // no _extensions_
    15, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294934528,  // skipmap
    offsetof(decltype(_table_), field_entries),
    15,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Object_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Object, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Object, _impl_.id_)}},
    // double dx = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(Object, _impl_.dx_)}},
    // double dy = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(Object, _impl_.dy_)}},
    // .carla.Vector speed = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(Object, _impl_.speed_)}},
    // .carla.Vector acceleration = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 1, 1, PROTOBUF_FIELD_OFFSET(Object, _impl_.acceleration_)}},
    // double length = 6;
    {::_pbi::TcParser::FastF64S1,
     {49, 63, 0, PROTOBUF_FIELD_OFFSET(Object, _impl_.length_)}},
    // double width = 7;
    {::_pbi::TcParser::FastF64S1,
     {57, 63, 0, PROTOBUF_FIELD_OFFSET(Object, _impl_.width_)}},
    // bool onSight = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Object, _impl_.onsight_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(Object, _impl_.onsight_)}},
    // bool tracked = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Object, _impl_.tracked_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(Object, _impl_.tracked_)}},
    // int32 timestamp = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Object, _impl_.timestamp_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(Object, _impl_.timestamp_)}},
    // double confidence = 11;
    {::_pbi::TcParser::FastF64S1,
     {89, 63, 0, PROTOBUF_FIELD_OFFSET(Object, _impl_.confidence_)}},
    // double yaw = 12;
    {::_pbi::TcParser::FastF64S1,
     {97, 63, 0, PROTOBUF_FIELD_OFFSET(Object, _impl_.yaw_)}},
    // .carla.Transform transform = 13;
    {::_pbi::TcParser::FastMtS1,
     {106, 2, 2, PROTOBUF_FIELD_OFFSET(Object, _impl_.transform_)}},
    // bool detected = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Object, _impl_.detected_), 63>(),
     {112, 63, 0, PROTOBUF_FIELD_OFFSET(Object, _impl_.detected_)}},
    // int32 perceivedBy = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Object, _impl_.perceivedby_), 63>(),
     {120, 63, 0, PROTOBUF_FIELD_OFFSET(Object, _impl_.perceivedby_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(Object, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // double dx = 2;
    {PROTOBUF_FIELD_OFFSET(Object, _impl_.dx_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double dy = 3;
    {PROTOBUF_FIELD_OFFSET(Object, _impl_.dy_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // .carla.Vector speed = 4;
    {PROTOBUF_FIELD_OFFSET(Object, _impl_.speed_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .carla.Vector acceleration = 5;
    {PROTOBUF_FIELD_OFFSET(Object, _impl_.acceleration_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // double length = 6;
    {PROTOBUF_FIELD_OFFSET(Object, _impl_.length_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double width = 7;
    {PROTOBUF_FIELD_OFFSET(Object, _impl_.width_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // bool onSight = 8;
    {PROTOBUF_FIELD_OFFSET(Object, _impl_.onsight_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool tracked = 9;
    {PROTOBUF_FIELD_OFFSET(Object, _impl_.tracked_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 timestamp = 10;
    {PROTOBUF_FIELD_OFFSET(Object, _impl_.timestamp_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // double confidence = 11;
    {PROTOBUF_FIELD_OFFSET(Object, _impl_.confidence_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double yaw = 12;
    {PROTOBUF_FIELD_OFFSET(Object, _impl_.yaw_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // .carla.Transform transform = 13;
    {PROTOBUF_FIELD_OFFSET(Object, _impl_.transform_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool detected = 14;
    {PROTOBUF_FIELD_OFFSET(Object, _impl_.detected_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 perceivedBy = 15;
    {PROTOBUF_FIELD_OFFSET(Object, _impl_.perceivedby_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::carla::Vector>()},
    {::_pbi::TcParser::GetTable<::carla::Vector>()},
    {::_pbi::TcParser::GetTable<::carla::Transform>()},
  }}, {{
  }},
};

::uint8_t* Object::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:carla.Object)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // double dx = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_dx = this->_internal_dx();
  ::uint64_t raw_dx;
  memcpy(&raw_dx, &tmp_dx, sizeof(tmp_dx));
  if (raw_dx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_dx(), target);
  }

  // double dy = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_dy = this->_internal_dy();
  ::uint64_t raw_dy;
  memcpy(&raw_dy, &tmp_dy, sizeof(tmp_dy));
  if (raw_dy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_dy(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .carla.Vector speed = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::speed(this),
        _Internal::speed(this).GetCachedSize(), target, stream);
  }

  // .carla.Vector acceleration = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::acceleration(this),
        _Internal::acceleration(this).GetCachedSize(), target, stream);
  }

  // double length = 6;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_length = this->_internal_length();
  ::uint64_t raw_length;
  memcpy(&raw_length, &tmp_length, sizeof(tmp_length));
  if (raw_length != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        6, this->_internal_length(), target);
  }

  // double width = 7;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_width = this->_internal_width();
  ::uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        7, this->_internal_width(), target);
  }

  // bool onSight = 8;
  if (this->_internal_onsight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        8, this->_internal_onsight(), target);
  }

  // bool tracked = 9;
  if (this->_internal_tracked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        9, this->_internal_tracked(), target);
  }

  // int32 timestamp = 10;
  if (this->_internal_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<10>(
            stream, this->_internal_timestamp(), target);
  }

  // double confidence = 11;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_confidence = this->_internal_confidence();
  ::uint64_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        11, this->_internal_confidence(), target);
  }

  // double yaw = 12;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_yaw = this->_internal_yaw();
  ::uint64_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        12, this->_internal_yaw(), target);
  }

  // .carla.Transform transform = 13;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        13, _Internal::transform(this),
        _Internal::transform(this).GetCachedSize(), target, stream);
  }

  // bool detected = 14;
  if (this->_internal_detected() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        14, this->_internal_detected(), target);
  }

  // int32 perceivedBy = 15;
  if (this->_internal_perceivedby() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<15>(
            stream, this->_internal_perceivedby(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:carla.Object)
  return target;
}

::size_t Object::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carla.Object)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .carla.Vector speed = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.speed_);
    }

    // .carla.Vector acceleration = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.acceleration_);
    }

    // .carla.Transform transform = 13;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.transform_);
    }

  }
  // double dx = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_dx = this->_internal_dx();
  ::uint64_t raw_dx;
  memcpy(&raw_dx, &tmp_dx, sizeof(tmp_dx));
  if (raw_dx != 0) {
    total_size += 9;
  }

  // double dy = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_dy = this->_internal_dy();
  ::uint64_t raw_dy;
  memcpy(&raw_dy, &tmp_dy, sizeof(tmp_dy));
  if (raw_dy != 0) {
    total_size += 9;
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  // int32 timestamp = 10;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_timestamp());
  }

  // double length = 6;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_length = this->_internal_length();
  ::uint64_t raw_length;
  memcpy(&raw_length, &tmp_length, sizeof(tmp_length));
  if (raw_length != 0) {
    total_size += 9;
  }

  // double width = 7;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_width = this->_internal_width();
  ::uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    total_size += 9;
  }

  // double confidence = 11;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_confidence = this->_internal_confidence();
  ::uint64_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    total_size += 9;
  }

  // bool onSight = 8;
  if (this->_internal_onsight() != 0) {
    total_size += 2;
  }

  // bool tracked = 9;
  if (this->_internal_tracked() != 0) {
    total_size += 2;
  }

  // bool detected = 14;
  if (this->_internal_detected() != 0) {
    total_size += 2;
  }

  // int32 perceivedBy = 15;
  if (this->_internal_perceivedby() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_perceivedby());
  }

  // double yaw = 12;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_yaw = this->_internal_yaw();
  ::uint64_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Object::_class_data_ = {
    Object::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Object::GetClassData() const {
  return &_class_data_;
}

void Object::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Object*>(&to_msg);
  auto& from = static_cast<const Object&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:carla.Object)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_speed()->::carla::Vector::MergeFrom(
          from._internal_speed());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_acceleration()->::carla::Vector::MergeFrom(
          from._internal_acceleration());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_transform()->::carla::Transform::MergeFrom(
          from._internal_transform());
    }
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_dx = from._internal_dx();
  ::uint64_t raw_dx;
  memcpy(&raw_dx, &tmp_dx, sizeof(tmp_dx));
  if (raw_dx != 0) {
    _this->_internal_set_dx(from._internal_dx());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_dy = from._internal_dy();
  ::uint64_t raw_dy;
  memcpy(&raw_dy, &tmp_dy, sizeof(tmp_dy));
  if (raw_dy != 0) {
    _this->_internal_set_dy(from._internal_dy());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_length = from._internal_length();
  ::uint64_t raw_length;
  memcpy(&raw_length, &tmp_length, sizeof(tmp_length));
  if (raw_length != 0) {
    _this->_internal_set_length(from._internal_length());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_width = from._internal_width();
  ::uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_confidence = from._internal_confidence();
  ::uint64_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    _this->_internal_set_confidence(from._internal_confidence());
  }
  if (from._internal_onsight() != 0) {
    _this->_internal_set_onsight(from._internal_onsight());
  }
  if (from._internal_tracked() != 0) {
    _this->_internal_set_tracked(from._internal_tracked());
  }
  if (from._internal_detected() != 0) {
    _this->_internal_set_detected(from._internal_detected());
  }
  if (from._internal_perceivedby() != 0) {
    _this->_internal_set_perceivedby(from._internal_perceivedby());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_yaw = from._internal_yaw();
  ::uint64_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    _this->_internal_set_yaw(from._internal_yaw());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Object::CopyFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carla.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Object::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Object::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Object::InternalSwap(Object* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Object, _impl_.yaw_)
      + sizeof(Object::_impl_.yaw_)
      - PROTOBUF_FIELD_OFFSET(Object, _impl_.speed_)>(
          reinterpret_cast<char*>(&_impl_.speed_),
          reinterpret_cast<char*>(&other->_impl_.speed_));
}

::google::protobuf::Metadata Object::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_carla_2eproto_getter, &descriptor_table_carla_2eproto_once,
      file_level_metadata_carla_2eproto[6]);
}
// ===================================================================

class Objects::_Internal {
 public:
};

Objects::Objects(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:carla.Objects)
}
inline PROTOBUF_NDEBUG_INLINE Objects::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : objects_{visibility, arena, from.objects_},
        _cached_size_{0} {}

Objects::Objects(
    ::google::protobuf::Arena* arena,
    const Objects& from)
    : ::google::protobuf::Message(arena) {
  Objects* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:carla.Objects)
}
inline PROTOBUF_NDEBUG_INLINE Objects::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : objects_{visibility, arena},
        _cached_size_{0} {}

inline void Objects::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Objects::~Objects() {
  // @@protoc_insertion_point(destructor:carla.Objects)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Objects::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Objects::Clear() {
// @@protoc_insertion_point(message_clear_start:carla.Objects)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.objects_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Objects::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> Objects::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Objects_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .carla.Object objects = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Objects, _impl_.objects_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .carla.Object objects = 1;
    {PROTOBUF_FIELD_OFFSET(Objects, _impl_.objects_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::carla::Object>()},
  }}, {{
  }},
};

::uint8_t* Objects::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:carla.Objects)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .carla.Object objects = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_objects_size()); i < n; i++) {
    const auto& repfield = this->_internal_objects().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:carla.Objects)
  return target;
}

::size_t Objects::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carla.Objects)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .carla.Object objects = 1;
  total_size += 1UL * this->_internal_objects_size();
  for (const auto& msg : this->_internal_objects()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Objects::_class_data_ = {
    Objects::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Objects::GetClassData() const {
  return &_class_data_;
}

void Objects::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Objects*>(&to_msg);
  auto& from = static_cast<const Objects&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:carla.Objects)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_objects()->MergeFrom(
      from._internal_objects());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Objects::CopyFrom(const Objects& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carla.Objects)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Objects::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Objects::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Objects::InternalSwap(Objects* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.objects_.InternalSwap(&other->_impl_.objects_);
}

::google::protobuf::Metadata Objects::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_carla_2eproto_getter, &descriptor_table_carla_2eproto_once,
      file_level_metadata_carla_2eproto[7]);
}
// ===================================================================

class Boolean::_Internal {
 public:
};

Boolean::Boolean(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:carla.Boolean)
}
Boolean::Boolean(
    ::google::protobuf::Arena* arena, const Boolean& from)
    : Boolean(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Boolean::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Boolean::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.value_ = {};
}
Boolean::~Boolean() {
  // @@protoc_insertion_point(destructor:carla.Boolean)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Boolean::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Boolean::Clear() {
// @@protoc_insertion_point(message_clear_start:carla.Boolean)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Boolean::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> Boolean::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Boolean_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // bool value = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Boolean, _impl_.value_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Boolean, _impl_.value_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool value = 1;
    {PROTOBUF_FIELD_OFFSET(Boolean, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Boolean::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:carla.Boolean)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:carla.Boolean)
  return target;
}

::size_t Boolean::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carla.Boolean)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Boolean::_class_data_ = {
    Boolean::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Boolean::GetClassData() const {
  return &_class_data_;
}

void Boolean::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Boolean*>(&to_msg);
  auto& from = static_cast<const Boolean&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:carla.Boolean)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Boolean::CopyFrom(const Boolean& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carla.Boolean)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Boolean::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Boolean::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Boolean::InternalSwap(Boolean* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.value_, other->_impl_.value_);
}

::google::protobuf::Metadata Boolean::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_carla_2eproto_getter, &descriptor_table_carla_2eproto_once,
      file_level_metadata_carla_2eproto[8]);
}
// ===================================================================

class ObjectIn::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectIn>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ObjectIn, _impl_._has_bits_);
  static const ::carla::Object& object(const ObjectIn* msg);
  static void set_has_object(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::carla::Object& ObjectIn::_Internal::object(const ObjectIn* msg) {
  return *msg->_impl_.object_;
}
ObjectIn::ObjectIn(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:carla.ObjectIn)
}
inline PROTOBUF_NDEBUG_INLINE ObjectIn::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

ObjectIn::ObjectIn(
    ::google::protobuf::Arena* arena,
    const ObjectIn& from)
    : ::google::protobuf::Message(arena) {
  ObjectIn* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.object_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::carla::Object>(arena, *from._impl_.object_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, egoid_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, egoid_),
           offsetof(Impl_, fromid_) -
               offsetof(Impl_, egoid_) +
               sizeof(Impl_::fromid_));

  // @@protoc_insertion_point(copy_constructor:carla.ObjectIn)
}
inline PROTOBUF_NDEBUG_INLINE ObjectIn::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ObjectIn::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, object_),
           0,
           offsetof(Impl_, fromid_) -
               offsetof(Impl_, object_) +
               sizeof(Impl_::fromid_));
}
ObjectIn::~ObjectIn() {
  // @@protoc_insertion_point(destructor:carla.ObjectIn)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ObjectIn::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.object_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ObjectIn::Clear() {
// @@protoc_insertion_point(message_clear_start:carla.ObjectIn)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.object_ != nullptr);
    _impl_.object_->Clear();
  }
  ::memset(&_impl_.egoid_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.fromid_) -
      reinterpret_cast<char*>(&_impl_.egoid_)) + sizeof(_impl_.fromid_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ObjectIn::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> ObjectIn::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ObjectIn, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ObjectIn_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .carla.Object object = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ObjectIn, _impl_.object_)}},
    // int32 egoId = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ObjectIn, _impl_.egoid_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ObjectIn, _impl_.egoid_)}},
    // int32 fromId = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ObjectIn, _impl_.fromid_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(ObjectIn, _impl_.fromid_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .carla.Object object = 1;
    {PROTOBUF_FIELD_OFFSET(ObjectIn, _impl_.object_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 egoId = 2;
    {PROTOBUF_FIELD_OFFSET(ObjectIn, _impl_.egoid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 fromId = 3;
    {PROTOBUF_FIELD_OFFSET(ObjectIn, _impl_.fromid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::carla::Object>()},
  }}, {{
  }},
};

::uint8_t* ObjectIn::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:carla.ObjectIn)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .carla.Object object = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::object(this),
        _Internal::object(this).GetCachedSize(), target, stream);
  }

  // int32 egoId = 2;
  if (this->_internal_egoid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_egoid(), target);
  }

  // int32 fromId = 3;
  if (this->_internal_fromid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_fromid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:carla.ObjectIn)
  return target;
}

::size_t ObjectIn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carla.ObjectIn)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .carla.Object object = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.object_);
  }

  // int32 egoId = 2;
  if (this->_internal_egoid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_egoid());
  }

  // int32 fromId = 3;
  if (this->_internal_fromid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_fromid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ObjectIn::_class_data_ = {
    ObjectIn::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ObjectIn::GetClassData() const {
  return &_class_data_;
}

void ObjectIn::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ObjectIn*>(&to_msg);
  auto& from = static_cast<const ObjectIn&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:carla.ObjectIn)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_object()->::carla::Object::MergeFrom(
        from._internal_object());
  }
  if (from._internal_egoid() != 0) {
    _this->_internal_set_egoid(from._internal_egoid());
  }
  if (from._internal_fromid() != 0) {
    _this->_internal_set_fromid(from._internal_fromid());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectIn::CopyFrom(const ObjectIn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carla.ObjectIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ObjectIn::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ObjectIn::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ObjectIn::InternalSwap(ObjectIn* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectIn, _impl_.fromid_)
      + sizeof(ObjectIn::_impl_.fromid_)
      - PROTOBUF_FIELD_OFFSET(ObjectIn, _impl_.object_)>(
          reinterpret_cast<char*>(&_impl_.object_),
          reinterpret_cast<char*>(&other->_impl_.object_));
}

::google::protobuf::Metadata ObjectIn::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_carla_2eproto_getter, &descriptor_table_carla_2eproto_once,
      file_level_metadata_carla_2eproto[9]);
}
// ===================================================================

class Control::_Internal {
 public:
  using HasBits = decltype(std::declval<Control>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Control, _impl_._has_bits_);
  static const ::carla::Vector& waypoint(const Control* msg);
  static void set_has_waypoint(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::carla::Vector& Control::_Internal::waypoint(const Control* msg) {
  return *msg->_impl_.waypoint_;
}
Control::Control(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:carla.Control)
}
inline PROTOBUF_NDEBUG_INLINE Control::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Control::Control(
    ::google::protobuf::Arena* arena,
    const Control& from)
    : ::google::protobuf::Message(arena) {
  Control* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.waypoint_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::carla::Vector>(arena, *from._impl_.waypoint_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, speed_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, speed_),
           offsetof(Impl_, id_) -
               offsetof(Impl_, speed_) +
               sizeof(Impl_::id_));

  // @@protoc_insertion_point(copy_constructor:carla.Control)
}
inline PROTOBUF_NDEBUG_INLINE Control::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Control::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, waypoint_),
           0,
           offsetof(Impl_, id_) -
               offsetof(Impl_, waypoint_) +
               sizeof(Impl_::id_));
}
Control::~Control() {
  // @@protoc_insertion_point(destructor:carla.Control)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Control::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.waypoint_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Control::Clear() {
// @@protoc_insertion_point(message_clear_start:carla.Control)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.waypoint_ != nullptr);
    _impl_.waypoint_->Clear();
  }
  ::memset(&_impl_.speed_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.id_) -
      reinterpret_cast<char*>(&_impl_.speed_)) + sizeof(_impl_.id_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Control::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 0, 2> Control::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Control, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Control_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // double acceleration = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 63, 0, PROTOBUF_FIELD_OFFSET(Control, _impl_.acceleration_)}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Control, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Control, _impl_.id_)}},
    // .carla.Vector waypoint = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(Control, _impl_.waypoint_)}},
    // double speed = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(Control, _impl_.speed_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(Control, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .carla.Vector waypoint = 2;
    {PROTOBUF_FIELD_OFFSET(Control, _impl_.waypoint_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // double speed = 3;
    {PROTOBUF_FIELD_OFFSET(Control, _impl_.speed_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double acceleration = 4;
    {PROTOBUF_FIELD_OFFSET(Control, _impl_.acceleration_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }}, {{
    {::_pbi::TcParser::GetTable<::carla::Vector>()},
  }}, {{
  }},
};

::uint8_t* Control::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:carla.Control)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .carla.Vector waypoint = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::waypoint(this),
        _Internal::waypoint(this).GetCachedSize(), target, stream);
  }

  // double speed = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_speed = this->_internal_speed();
  ::uint64_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_speed(), target);
  }

  // double acceleration = 4;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_acceleration = this->_internal_acceleration();
  ::uint64_t raw_acceleration;
  memcpy(&raw_acceleration, &tmp_acceleration, sizeof(tmp_acceleration));
  if (raw_acceleration != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        4, this->_internal_acceleration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:carla.Control)
  return target;
}

::size_t Control::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carla.Control)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .carla.Vector waypoint = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.waypoint_);
  }

  // double speed = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_speed = this->_internal_speed();
  ::uint64_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    total_size += 9;
  }

  // double acceleration = 4;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_acceleration = this->_internal_acceleration();
  ::uint64_t raw_acceleration;
  memcpy(&raw_acceleration, &tmp_acceleration, sizeof(tmp_acceleration));
  if (raw_acceleration != 0) {
    total_size += 9;
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Control::_class_data_ = {
    Control::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Control::GetClassData() const {
  return &_class_data_;
}

void Control::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Control*>(&to_msg);
  auto& from = static_cast<const Control&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:carla.Control)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_waypoint()->::carla::Vector::MergeFrom(
        from._internal_waypoint());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_speed = from._internal_speed();
  ::uint64_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    _this->_internal_set_speed(from._internal_speed());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_acceleration = from._internal_acceleration();
  ::uint64_t raw_acceleration;
  memcpy(&raw_acceleration, &tmp_acceleration, sizeof(tmp_acceleration));
  if (raw_acceleration != 0) {
    _this->_internal_set_acceleration(from._internal_acceleration());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Control::CopyFrom(const Control& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carla.Control)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Control::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Control::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Control::InternalSwap(Control* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Control, _impl_.id_)
      + sizeof(Control::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(Control, _impl_.waypoint_)>(
          reinterpret_cast<char*>(&_impl_.waypoint_),
          reinterpret_cast<char*>(&other->_impl_.waypoint_));
}

::google::protobuf::Metadata Control::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_carla_2eproto_getter, &descriptor_table_carla_2eproto_once,
      file_level_metadata_carla_2eproto[10]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace carla
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
