// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: carla.proto

#include "carla.pb.h"
#include "carla.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace carla {

static const char* CarlaAdapter_method_names[] = {
  "/carla.CarlaAdapter/ExecuteOneTimeStep",
  "/carla.CarlaAdapter/Finish",
  "/carla.CarlaAdapter/GetManagedActorsIds",
  "/carla.CarlaAdapter/GetManagedCAVsIds",
  "/carla.CarlaAdapter/GetManagedActorById",
  "/carla.CarlaAdapter/InsertVehicle",
  "/carla.CarlaAdapter/GetRandomSpawnPoint",
  "/carla.CarlaAdapter/GetActorLDM",
  "/carla.CarlaAdapter/InsertObject",
  "/carla.CarlaAdapter/GetCartesian",
  "/carla.CarlaAdapter/GetGeo",
  "/carla.CarlaAdapter/hasLDM",
  "/carla.CarlaAdapter/SetControl",
};

std::unique_ptr< CarlaAdapter::Stub> CarlaAdapter::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CarlaAdapter::Stub> stub(new CarlaAdapter::Stub(channel, options));
  return stub;
}

CarlaAdapter::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ExecuteOneTimeStep_(CarlaAdapter_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Finish_(CarlaAdapter_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetManagedActorsIds_(CarlaAdapter_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetManagedCAVsIds_(CarlaAdapter_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetManagedActorById_(CarlaAdapter_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InsertVehicle_(CarlaAdapter_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRandomSpawnPoint_(CarlaAdapter_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetActorLDM_(CarlaAdapter_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InsertObject_(CarlaAdapter_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCartesian_(CarlaAdapter_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetGeo_(CarlaAdapter_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_hasLDM_(CarlaAdapter_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetControl_(CarlaAdapter_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CarlaAdapter::Stub::ExecuteOneTimeStep(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::carla::Boolean* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::carla::Boolean, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteOneTimeStep_, context, request, response);
}

void CarlaAdapter::Stub::async::ExecuteOneTimeStep(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::carla::Boolean* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::carla::Boolean, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteOneTimeStep_, context, request, response, std::move(f));
}

void CarlaAdapter::Stub::async::ExecuteOneTimeStep(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::carla::Boolean* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteOneTimeStep_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::carla::Boolean>* CarlaAdapter::Stub::PrepareAsyncExecuteOneTimeStepRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::carla::Boolean, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteOneTimeStep_, context, request);
}

::grpc::ClientAsyncResponseReader< ::carla::Boolean>* CarlaAdapter::Stub::AsyncExecuteOneTimeStepRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteOneTimeStepRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CarlaAdapter::Stub::Finish(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Finish_, context, request, response);
}

void CarlaAdapter::Stub::async::Finish(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Finish_, context, request, response, std::move(f));
}

void CarlaAdapter::Stub::async::Finish(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Finish_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CarlaAdapter::Stub::PrepareAsyncFinishRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Finish_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CarlaAdapter::Stub::AsyncFinishRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFinishRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CarlaAdapter::Stub::GetManagedActorsIds(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::carla::ActorIds* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::carla::ActorIds, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetManagedActorsIds_, context, request, response);
}

void CarlaAdapter::Stub::async::GetManagedActorsIds(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::carla::ActorIds* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::carla::ActorIds, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetManagedActorsIds_, context, request, response, std::move(f));
}

void CarlaAdapter::Stub::async::GetManagedActorsIds(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::carla::ActorIds* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetManagedActorsIds_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::carla::ActorIds>* CarlaAdapter::Stub::PrepareAsyncGetManagedActorsIdsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::carla::ActorIds, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetManagedActorsIds_, context, request);
}

::grpc::ClientAsyncResponseReader< ::carla::ActorIds>* CarlaAdapter::Stub::AsyncGetManagedActorsIdsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetManagedActorsIdsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CarlaAdapter::Stub::GetManagedCAVsIds(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::carla::ActorIds* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::carla::ActorIds, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetManagedCAVsIds_, context, request, response);
}

void CarlaAdapter::Stub::async::GetManagedCAVsIds(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::carla::ActorIds* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::carla::ActorIds, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetManagedCAVsIds_, context, request, response, std::move(f));
}

void CarlaAdapter::Stub::async::GetManagedCAVsIds(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::carla::ActorIds* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetManagedCAVsIds_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::carla::ActorIds>* CarlaAdapter::Stub::PrepareAsyncGetManagedCAVsIdsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::carla::ActorIds, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetManagedCAVsIds_, context, request);
}

::grpc::ClientAsyncResponseReader< ::carla::ActorIds>* CarlaAdapter::Stub::AsyncGetManagedCAVsIdsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetManagedCAVsIdsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CarlaAdapter::Stub::GetManagedActorById(::grpc::ClientContext* context, const ::carla::Number& request, ::carla::Vehicle* response) {
  return ::grpc::internal::BlockingUnaryCall< ::carla::Number, ::carla::Vehicle, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetManagedActorById_, context, request, response);
}

void CarlaAdapter::Stub::async::GetManagedActorById(::grpc::ClientContext* context, const ::carla::Number* request, ::carla::Vehicle* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::carla::Number, ::carla::Vehicle, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetManagedActorById_, context, request, response, std::move(f));
}

void CarlaAdapter::Stub::async::GetManagedActorById(::grpc::ClientContext* context, const ::carla::Number* request, ::carla::Vehicle* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetManagedActorById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::carla::Vehicle>* CarlaAdapter::Stub::PrepareAsyncGetManagedActorByIdRaw(::grpc::ClientContext* context, const ::carla::Number& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::carla::Vehicle, ::carla::Number, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetManagedActorById_, context, request);
}

::grpc::ClientAsyncResponseReader< ::carla::Vehicle>* CarlaAdapter::Stub::AsyncGetManagedActorByIdRaw(::grpc::ClientContext* context, const ::carla::Number& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetManagedActorByIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CarlaAdapter::Stub::InsertVehicle(::grpc::ClientContext* context, const ::carla::Vehicle& request, ::carla::Number* response) {
  return ::grpc::internal::BlockingUnaryCall< ::carla::Vehicle, ::carla::Number, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InsertVehicle_, context, request, response);
}

void CarlaAdapter::Stub::async::InsertVehicle(::grpc::ClientContext* context, const ::carla::Vehicle* request, ::carla::Number* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::carla::Vehicle, ::carla::Number, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InsertVehicle_, context, request, response, std::move(f));
}

void CarlaAdapter::Stub::async::InsertVehicle(::grpc::ClientContext* context, const ::carla::Vehicle* request, ::carla::Number* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InsertVehicle_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::carla::Number>* CarlaAdapter::Stub::PrepareAsyncInsertVehicleRaw(::grpc::ClientContext* context, const ::carla::Vehicle& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::carla::Number, ::carla::Vehicle, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InsertVehicle_, context, request);
}

::grpc::ClientAsyncResponseReader< ::carla::Number>* CarlaAdapter::Stub::AsyncInsertVehicleRaw(::grpc::ClientContext* context, const ::carla::Vehicle& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInsertVehicleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CarlaAdapter::Stub::GetRandomSpawnPoint(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::carla::Transform* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::carla::Transform, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRandomSpawnPoint_, context, request, response);
}

void CarlaAdapter::Stub::async::GetRandomSpawnPoint(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::carla::Transform* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::carla::Transform, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRandomSpawnPoint_, context, request, response, std::move(f));
}

void CarlaAdapter::Stub::async::GetRandomSpawnPoint(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::carla::Transform* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRandomSpawnPoint_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::carla::Transform>* CarlaAdapter::Stub::PrepareAsyncGetRandomSpawnPointRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::carla::Transform, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRandomSpawnPoint_, context, request);
}

::grpc::ClientAsyncResponseReader< ::carla::Transform>* CarlaAdapter::Stub::AsyncGetRandomSpawnPointRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRandomSpawnPointRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CarlaAdapter::Stub::GetActorLDM(::grpc::ClientContext* context, const ::carla::Number& request, ::carla::Objects* response) {
  return ::grpc::internal::BlockingUnaryCall< ::carla::Number, ::carla::Objects, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetActorLDM_, context, request, response);
}

void CarlaAdapter::Stub::async::GetActorLDM(::grpc::ClientContext* context, const ::carla::Number* request, ::carla::Objects* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::carla::Number, ::carla::Objects, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetActorLDM_, context, request, response, std::move(f));
}

void CarlaAdapter::Stub::async::GetActorLDM(::grpc::ClientContext* context, const ::carla::Number* request, ::carla::Objects* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetActorLDM_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::carla::Objects>* CarlaAdapter::Stub::PrepareAsyncGetActorLDMRaw(::grpc::ClientContext* context, const ::carla::Number& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::carla::Objects, ::carla::Number, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetActorLDM_, context, request);
}

::grpc::ClientAsyncResponseReader< ::carla::Objects>* CarlaAdapter::Stub::AsyncGetActorLDMRaw(::grpc::ClientContext* context, const ::carla::Number& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetActorLDMRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CarlaAdapter::Stub::InsertObject(::grpc::ClientContext* context, const ::carla::ObjectIn& request, ::carla::Number* response) {
  return ::grpc::internal::BlockingUnaryCall< ::carla::ObjectIn, ::carla::Number, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InsertObject_, context, request, response);
}

void CarlaAdapter::Stub::async::InsertObject(::grpc::ClientContext* context, const ::carla::ObjectIn* request, ::carla::Number* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::carla::ObjectIn, ::carla::Number, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InsertObject_, context, request, response, std::move(f));
}

void CarlaAdapter::Stub::async::InsertObject(::grpc::ClientContext* context, const ::carla::ObjectIn* request, ::carla::Number* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InsertObject_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::carla::Number>* CarlaAdapter::Stub::PrepareAsyncInsertObjectRaw(::grpc::ClientContext* context, const ::carla::ObjectIn& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::carla::Number, ::carla::ObjectIn, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InsertObject_, context, request);
}

::grpc::ClientAsyncResponseReader< ::carla::Number>* CarlaAdapter::Stub::AsyncInsertObjectRaw(::grpc::ClientContext* context, const ::carla::ObjectIn& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInsertObjectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CarlaAdapter::Stub::GetCartesian(::grpc::ClientContext* context, const ::carla::Vector& request, ::carla::Vector* response) {
  return ::grpc::internal::BlockingUnaryCall< ::carla::Vector, ::carla::Vector, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCartesian_, context, request, response);
}

void CarlaAdapter::Stub::async::GetCartesian(::grpc::ClientContext* context, const ::carla::Vector* request, ::carla::Vector* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::carla::Vector, ::carla::Vector, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCartesian_, context, request, response, std::move(f));
}

void CarlaAdapter::Stub::async::GetCartesian(::grpc::ClientContext* context, const ::carla::Vector* request, ::carla::Vector* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCartesian_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::carla::Vector>* CarlaAdapter::Stub::PrepareAsyncGetCartesianRaw(::grpc::ClientContext* context, const ::carla::Vector& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::carla::Vector, ::carla::Vector, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCartesian_, context, request);
}

::grpc::ClientAsyncResponseReader< ::carla::Vector>* CarlaAdapter::Stub::AsyncGetCartesianRaw(::grpc::ClientContext* context, const ::carla::Vector& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCartesianRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CarlaAdapter::Stub::GetGeo(::grpc::ClientContext* context, const ::carla::Vector& request, ::carla::Vector* response) {
  return ::grpc::internal::BlockingUnaryCall< ::carla::Vector, ::carla::Vector, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetGeo_, context, request, response);
}

void CarlaAdapter::Stub::async::GetGeo(::grpc::ClientContext* context, const ::carla::Vector* request, ::carla::Vector* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::carla::Vector, ::carla::Vector, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetGeo_, context, request, response, std::move(f));
}

void CarlaAdapter::Stub::async::GetGeo(::grpc::ClientContext* context, const ::carla::Vector* request, ::carla::Vector* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetGeo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::carla::Vector>* CarlaAdapter::Stub::PrepareAsyncGetGeoRaw(::grpc::ClientContext* context, const ::carla::Vector& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::carla::Vector, ::carla::Vector, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetGeo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::carla::Vector>* CarlaAdapter::Stub::AsyncGetGeoRaw(::grpc::ClientContext* context, const ::carla::Vector& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetGeoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CarlaAdapter::Stub::hasLDM(::grpc::ClientContext* context, const ::carla::Number& request, ::carla::Boolean* response) {
  return ::grpc::internal::BlockingUnaryCall< ::carla::Number, ::carla::Boolean, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_hasLDM_, context, request, response);
}

void CarlaAdapter::Stub::async::hasLDM(::grpc::ClientContext* context, const ::carla::Number* request, ::carla::Boolean* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::carla::Number, ::carla::Boolean, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_hasLDM_, context, request, response, std::move(f));
}

void CarlaAdapter::Stub::async::hasLDM(::grpc::ClientContext* context, const ::carla::Number* request, ::carla::Boolean* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_hasLDM_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::carla::Boolean>* CarlaAdapter::Stub::PrepareAsynchasLDMRaw(::grpc::ClientContext* context, const ::carla::Number& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::carla::Boolean, ::carla::Number, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_hasLDM_, context, request);
}

::grpc::ClientAsyncResponseReader< ::carla::Boolean>* CarlaAdapter::Stub::AsynchasLDMRaw(::grpc::ClientContext* context, const ::carla::Number& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynchasLDMRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CarlaAdapter::Stub::SetControl(::grpc::ClientContext* context, const ::carla::Control& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::carla::Control, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetControl_, context, request, response);
}

void CarlaAdapter::Stub::async::SetControl(::grpc::ClientContext* context, const ::carla::Control* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::carla::Control, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetControl_, context, request, response, std::move(f));
}

void CarlaAdapter::Stub::async::SetControl(::grpc::ClientContext* context, const ::carla::Control* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CarlaAdapter::Stub::PrepareAsyncSetControlRaw(::grpc::ClientContext* context, const ::carla::Control& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::carla::Control, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CarlaAdapter::Stub::AsyncSetControlRaw(::grpc::ClientContext* context, const ::carla::Control& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

CarlaAdapter::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CarlaAdapter_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CarlaAdapter::Service, ::google::protobuf::Empty, ::carla::Boolean, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CarlaAdapter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::carla::Boolean* resp) {
               return service->ExecuteOneTimeStep(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CarlaAdapter_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CarlaAdapter::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CarlaAdapter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->Finish(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CarlaAdapter_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CarlaAdapter::Service, ::google::protobuf::Empty, ::carla::ActorIds, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CarlaAdapter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::carla::ActorIds* resp) {
               return service->GetManagedActorsIds(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CarlaAdapter_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CarlaAdapter::Service, ::google::protobuf::Empty, ::carla::ActorIds, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CarlaAdapter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::carla::ActorIds* resp) {
               return service->GetManagedCAVsIds(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CarlaAdapter_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CarlaAdapter::Service, ::carla::Number, ::carla::Vehicle, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CarlaAdapter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::carla::Number* req,
             ::carla::Vehicle* resp) {
               return service->GetManagedActorById(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CarlaAdapter_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CarlaAdapter::Service, ::carla::Vehicle, ::carla::Number, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CarlaAdapter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::carla::Vehicle* req,
             ::carla::Number* resp) {
               return service->InsertVehicle(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CarlaAdapter_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CarlaAdapter::Service, ::google::protobuf::Empty, ::carla::Transform, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CarlaAdapter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::carla::Transform* resp) {
               return service->GetRandomSpawnPoint(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CarlaAdapter_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CarlaAdapter::Service, ::carla::Number, ::carla::Objects, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CarlaAdapter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::carla::Number* req,
             ::carla::Objects* resp) {
               return service->GetActorLDM(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CarlaAdapter_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CarlaAdapter::Service, ::carla::ObjectIn, ::carla::Number, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CarlaAdapter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::carla::ObjectIn* req,
             ::carla::Number* resp) {
               return service->InsertObject(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CarlaAdapter_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CarlaAdapter::Service, ::carla::Vector, ::carla::Vector, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CarlaAdapter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::carla::Vector* req,
             ::carla::Vector* resp) {
               return service->GetCartesian(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CarlaAdapter_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CarlaAdapter::Service, ::carla::Vector, ::carla::Vector, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CarlaAdapter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::carla::Vector* req,
             ::carla::Vector* resp) {
               return service->GetGeo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CarlaAdapter_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CarlaAdapter::Service, ::carla::Number, ::carla::Boolean, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CarlaAdapter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::carla::Number* req,
             ::carla::Boolean* resp) {
               return service->hasLDM(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CarlaAdapter_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CarlaAdapter::Service, ::carla::Control, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CarlaAdapter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::carla::Control* req,
             ::google::protobuf::Empty* resp) {
               return service->SetControl(ctx, req, resp);
             }, this)));
}

CarlaAdapter::Service::~Service() {
}

::grpc::Status CarlaAdapter::Service::ExecuteOneTimeStep(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::carla::Boolean* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CarlaAdapter::Service::Finish(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CarlaAdapter::Service::GetManagedActorsIds(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::carla::ActorIds* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CarlaAdapter::Service::GetManagedCAVsIds(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::carla::ActorIds* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CarlaAdapter::Service::GetManagedActorById(::grpc::ServerContext* context, const ::carla::Number* request, ::carla::Vehicle* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CarlaAdapter::Service::InsertVehicle(::grpc::ServerContext* context, const ::carla::Vehicle* request, ::carla::Number* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CarlaAdapter::Service::GetRandomSpawnPoint(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::carla::Transform* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CarlaAdapter::Service::GetActorLDM(::grpc::ServerContext* context, const ::carla::Number* request, ::carla::Objects* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CarlaAdapter::Service::InsertObject(::grpc::ServerContext* context, const ::carla::ObjectIn* request, ::carla::Number* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CarlaAdapter::Service::GetCartesian(::grpc::ServerContext* context, const ::carla::Vector* request, ::carla::Vector* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CarlaAdapter::Service::GetGeo(::grpc::ServerContext* context, const ::carla::Vector* request, ::carla::Vector* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CarlaAdapter::Service::hasLDM(::grpc::ServerContext* context, const ::carla::Number* request, ::carla::Boolean* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CarlaAdapter::Service::SetControl(::grpc::ServerContext* context, const ::carla::Control* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace carla

